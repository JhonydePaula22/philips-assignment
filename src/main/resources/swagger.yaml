openapi: "3.0.0"

info:
  description: REST API to maintain Products Catalogue
  version: "1.0.0"
  title: WAES assignment - Scalable Web
  contact:
    email: jonathanpaula22@gmail.com
    url: https://www.linkedin.com/in/jonathan-de-paula/?locale=en_US


tags:
  - name: Retrieve Products Endpoints
    description: Endpoint to get Products data
  - name: Input & Update Products Endpoints
    description: Endpoint to input & update Products data
  - name: Delete Products Endpoint
    description: Endpoint to delete Products

paths:
  /v1/products/{id}:
    get:
      tags:
        - Retrieve Products Endpoints
      summary: Method to handle GET requests. Returns a Product based on the provided ID
      operationId: getProduct
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/upstream"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
    patch:
      tags:
        - Input & Update Products Endpoints
      summary: Method to handle PATCH requests. Update Products data
      operationId: updateProduct
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductDTO"
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
    delete:
      tags:
        - Delete Products Endpoint
      summary: Method to handle DELETE requests. Delete Products
      operationId: deleteProduct
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"

  /v1/products:
    get:
      tags:
        - Retrieve Products Endpoints
      summary: Method to handle GET requests. Returns a Products List
      operationId: getProducts
      parameters:
        - $ref: "#/components/parameters/upstream"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductsDTO"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
    post:
      tags:
        - Input & Update Products Endpoints
      summary: Method to handle POST requests. Persists New Products data
      operationId: persistProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProductDTO"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"

components:
  parameters:
    id:
      name: id
      in: path
      schema:
        type: string
        example: "d184e0c9-c80c-4918-a8c1-c4e24c6b32cb"
      required: true
      description: ID of the Product
    upstream:
      name: upstream
      in: query
      schema:
        type: string
        example: true
        default: false
      required: false
      description: Should get local data, or query data from 3rd parties API

  schemas:

    ProductsDTO:
      title: Products DTO
      type: object
      description: Object that represents the Products List Schema
      required:
        - bundle
      properties:
        bundle:
          type: array
          nullable: false
          title: Products List
          items:
            $ref: "#/components/schemas/ProductDTO"

    ProductDTO:
      title: Product DTO
      type: object
      description: Object that represents the Product Schema
      required:
        - id
        - name
        - price
        - quantity
      properties:
        id:
          type: string
          nullable: false
          description: Product identifier
          example: "d184e0c9-c80c-4918-a8c1-c4e24c6b32cb"
        name:
          type: string
          nullable: false
          description: Product name
          example: Product XYZ
        price:
          type: number
          nullable: false
          description: Product price
          example: 12.98
        quantity:
          type: integer
          nullable: false
          description: Product quantity
          example: 1

    NewProductDTO:
      title: New Product DTO
      type: object
      description: Object that represents the New Product Schema
      required:
        - name
        - price
        - quantity
      properties:
        name:
          type: string
          nullable: false
          description: Product name
          example: Product XYZ
        price:
          type: number
          nullable: false
          description: Product price
          example: 12.98
        quantity:
          type: integer
          nullable: false
          description: Product quantity
          example: 1

    UpdateProductDTO:
      title: Update Product DTO
      type: object
      description: Object that represents the Update Product Schema
      properties:
        name:
          type: string
          nullable: true
          description: Product name
          example: Product XYZ
        price:
          type: number
          nullable: true
          description: Product price
          example: 12.98
        quantity:
          type: integer
          nullable: true
          description: Product quantity
          example: 1

    ErrorDTO:
      type: object
      description: Erro Object
      required:
        - message
      properties:
        message:
          type: string
          title: Message
          nullable: false
          description: Description of possible errors that ocurred while performing some action
          example: Error description